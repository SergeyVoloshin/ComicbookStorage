// <auto-generated />
using System;
using ComicbookStorage.Infrastructure.EF;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ComicbookStorage.Infrastructure.EF.Migrations
{
    [DbContext(typeof(ComicbookStorageContext))]
    [Migration("20190527150233_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.3-servicing-35854")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ComicbookStorage.Domain.Core.Entities.Comicbook", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CoverExtension")
                        .IsRequired()
                        .HasMaxLength(4);

                    b.Property<string>("Description")
                        .HasMaxLength(1024);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("UserFriendlyId")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasAlternateKey("UserFriendlyId");

                    b.ToTable("Comicbook");
                });

            modelBuilder.Entity("ComicbookStorage.Domain.Core.Entities.Email", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Body")
                        .IsRequired();

                    b.Property<DateTime>("CreationTime");

                    b.Property<int?>("EmailTemplateId");

                    b.Property<DateTime?>("LastSendingAttemptTime");

                    b.Property<string>("LastSendingError");

                    b.Property<string>("Recipient")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<int>("Status")
                        .IsConcurrencyToken();

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("EmailTemplateId");

                    b.ToTable("Email");
                });

            modelBuilder.Entity("ComicbookStorage.Domain.Core.Entities.EmailTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Body")
                        .IsRequired();

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("EmailTemplate");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Body = @"You recently registered the user {User.Name} on {ApplicationName}<br/>
Please confirm your email by clicking the link below.<br/>
<a href=""{ConfirmationLink}"">Confirm this email address</a>",
                            Subject = "[{ApplicationName}] Confirm your email address"
                        });
                });

            modelBuilder.Entity("ComicbookStorage.Domain.Core.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConfirmationCode")
                        .HasMaxLength(255);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<int>("EncryptionIterationCount");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasAlternateKey("Email");

                    b.HasAlternateKey("Name");

                    b.ToTable("User");
                });

            modelBuilder.Entity("ComicbookStorage.Domain.Core.Entities.Email", b =>
                {
                    b.HasOne("ComicbookStorage.Domain.Core.Entities.EmailTemplate")
                        .WithMany()
                        .HasForeignKey("EmailTemplateId");
                });
#pragma warning restore 612, 618
        }
    }
}
